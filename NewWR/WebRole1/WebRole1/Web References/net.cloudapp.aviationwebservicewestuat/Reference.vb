'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace net.cloudapp.aviationwebservicewestuat
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebService1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AliveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCarrierQuoteByTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ACGProvidersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckAvailabilityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLowestQuoteByClassPartialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fosoptimizerreportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostToMsgQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PopFromMsgQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private logmeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestDeltaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeltaContractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetD2DQuotesByClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestQuoteD2D2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private TweetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMaintNextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLowestQuoteByClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoundEarthDistanceFromLatLongOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FOSImportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FlightRequestMatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FlightRequestReserveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FlightRequestUploadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FlightRequestCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarrierFlightsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getdistanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AOEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AirportLongLatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AOEbyCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAirRoutesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRegionalAirportsByCarriersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllAirportsInStateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAirportsInStateRunwayInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoundEarthDistanceBetweenLocationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAirportInformationByAirportCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private clickcountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecordMaintenanceEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OptimizeCASWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OptimizeCASWebSmallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OptimizeCASRepositionCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private paymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLowestQuoteByClassXMLTESTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HistoricalRepositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BARTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TranslateCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatsTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private codesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebRole1.My.MySettings.Default.WebRole1_net_cloudapp_aviationwebservicewestuat_WebService1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event AliveCompleted As AliveCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCarrierQuoteByTypeCompleted As GetCarrierQuoteByTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event ACGProvidersCompleted As ACGProvidersCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckAvailabilityCompleted As CheckAvailabilityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLowestQuoteByClassPartialCompleted As GetLowestQuoteByClassPartialCompletedEventHandler
        
        '''<remarks/>
        Public Event fosoptimizerreportCompleted As fosoptimizerreportCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailCompleted As SendEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event PostToMsgQueueCompleted As PostToMsgQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event PopFromMsgQueueCompleted As PopFromMsgQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event logmeCompleted As logmeCompletedEventHandler
        
        '''<remarks/>
        Public Event TestDeltaCompleted As TestDeltaCompletedEventHandler
        
        '''<remarks/>
        Public Event DeltaContractCompleted As DeltaContractCompletedEventHandler
        
        '''<remarks/>
        Public Event GetD2DQuotesByClassCompleted As GetD2DQuotesByClassCompletedEventHandler
        
        '''<remarks/>
        Public Event TestQuoteD2D2Completed As TestQuoteD2D2CompletedEventHandler
        
        '''<remarks/>
        Public Event TweetCompleted As TweetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMaintNextCompleted As UpdateMaintNextCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLowestQuoteByClassCompleted As GetLowestQuoteByClassCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoundEarthDistanceFromLatLongCompleted As GetRoundEarthDistanceFromLatLongCompletedEventHandler
        
        '''<remarks/>
        Public Event FOSImportCompleted As FOSImportCompletedEventHandler
        
        '''<remarks/>
        Public Event FlightRequestMatchCompleted As FlightRequestMatchCompletedEventHandler
        
        '''<remarks/>
        Public Event FlightRequestReserveCompleted As FlightRequestReserveCompletedEventHandler
        
        '''<remarks/>
        Public Event FlightRequestUploadCompleted As FlightRequestUploadCompletedEventHandler
        
        '''<remarks/>
        Public Event FlightRequestCancelCompleted As FlightRequestCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event CarrierFlightsCompleted As CarrierFlightsCompletedEventHandler
        
        '''<remarks/>
        Public Event getdistanceCompleted As getdistanceCompletedEventHandler
        
        '''<remarks/>
        Public Event AOECompleted As AOECompletedEventHandler
        
        '''<remarks/>
        Public Event AirportLongLatCompleted As AirportLongLatCompletedEventHandler
        
        '''<remarks/>
        Public Event AOEbyCountryCompleted As AOEbyCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAirRoutesCompleted As GetAirRoutesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompleted As GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRegionalAirportsByCarriersCompleted As GetRegionalAirportsByCarriersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllAirportsInStateCompleted As GetAllAirportsInStateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAirportsInStateRunwayInfoCompleted As GetAirportsInStateRunwayInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoundEarthDistanceBetweenLocationsCompleted As GetRoundEarthDistanceBetweenLocationsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAirportInformationByAirportCodeCompleted As GetAirportInformationByAirportCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event clickcountCompleted As clickcountCompletedEventHandler
        
        '''<remarks/>
        Public Event RecordMaintenanceEventCompleted As RecordMaintenanceEventCompletedEventHandler
        
        '''<remarks/>
        Public Event OptimizeCASWebCompleted As OptimizeCASWebCompletedEventHandler
        
        '''<remarks/>
        Public Event OptimizeCASWebSmallCompleted As OptimizeCASWebSmallCompletedEventHandler
        
        '''<remarks/>
        Public Event OptimizeCASRepositionCostCompleted As OptimizeCASRepositionCostCompletedEventHandler
        
        '''<remarks/>
        Public Event paymentCompleted As paymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLowestQuoteByClassXMLTESTCompleted As GetLowestQuoteByClassXMLTESTCompletedEventHandler
        
        '''<remarks/>
        Public Event HistoricalRepositionCompleted As HistoricalRepositionCompletedEventHandler
        
        '''<remarks/>
        Public Event BARTCompleted As BARTCompletedEventHandler
        
        '''<remarks/>
        Public Event StatsCompleted As StatsCompletedEventHandler
        
        '''<remarks/>
        Public Event TranslateCodeCompleted As TranslateCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event StatsTypeCompleted As StatsTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event codesCompleted As codesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Alive", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Alive(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer) As String
            Dim results() As Object = Me.Invoke("Alive", New Object() {userid, userpw, CarrierID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AliveAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer)
            Me.AliveAsync(userid, userpw, CarrierID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AliveAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal userState As Object)
            If (Me.AliveOperationCompleted Is Nothing) Then
                Me.AliveOperationCompleted = AddressOf Me.OnAliveOperationCompleted
            End If
            Me.InvokeAsync("Alive", New Object() {userid, userpw, CarrierID}, Me.AliveOperationCompleted, userState)
        End Sub
        
        Private Sub OnAliveOperationCompleted(ByVal arg As Object)
            If (Not (Me.AliveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AliveCompleted(Me, New AliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCarrierQuoteByType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCarrierQuoteByType( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal ACTypeID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCarrierQuoteByType", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, ACTypeID, MemberID, MemberIDCarrier})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCarrierQuoteByTypeAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal ACTypeID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer)
            Me.GetCarrierQuoteByTypeAsync(userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, ACTypeID, MemberID, MemberIDCarrier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCarrierQuoteByTypeAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal ACTypeID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer,  _
                    ByVal userState As Object)
            If (Me.GetCarrierQuoteByTypeOperationCompleted Is Nothing) Then
                Me.GetCarrierQuoteByTypeOperationCompleted = AddressOf Me.OnGetCarrierQuoteByTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCarrierQuoteByType", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, ACTypeID, MemberID, MemberIDCarrier}, Me.GetCarrierQuoteByTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCarrierQuoteByTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCarrierQuoteByTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCarrierQuoteByTypeCompleted(Me, New GetCarrierQuoteByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ACGProviders", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ACGProviders(ByVal userid As String, ByVal userpw As String, ByVal airport As String, ByVal weightclass As String, ByVal distance As Integer, ByVal paxcount As Integer, ByVal flighttype As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("ACGProviders", New Object() {userid, userpw, airport, weightclass, distance, paxcount, flighttype})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ACGProvidersAsync(ByVal userid As String, ByVal userpw As String, ByVal airport As String, ByVal weightclass As String, ByVal distance As Integer, ByVal paxcount As Integer, ByVal flighttype As String)
            Me.ACGProvidersAsync(userid, userpw, airport, weightclass, distance, paxcount, flighttype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ACGProvidersAsync(ByVal userid As String, ByVal userpw As String, ByVal airport As String, ByVal weightclass As String, ByVal distance As Integer, ByVal paxcount As Integer, ByVal flighttype As String, ByVal userState As Object)
            If (Me.ACGProvidersOperationCompleted Is Nothing) Then
                Me.ACGProvidersOperationCompleted = AddressOf Me.OnACGProvidersOperationCompleted
            End If
            Me.InvokeAsync("ACGProviders", New Object() {userid, userpw, airport, weightclass, distance, paxcount, flighttype}, Me.ACGProvidersOperationCompleted, userState)
        End Sub
        
        Private Sub OnACGProvidersOperationCompleted(ByVal arg As Object)
            If (Not (Me.ACGProvidersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ACGProvidersCompleted(Me, New ACGProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAvailability", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckAvailability(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean) As String
            Dim results() As Object = Me.Invoke("CheckAvailability", New Object() {userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckAvailabilityAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean)
            Me.CheckAvailabilityAsync(userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckAvailabilityAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean, ByVal userState As Object)
            If (Me.CheckAvailabilityOperationCompleted Is Nothing) Then
                Me.CheckAvailabilityOperationCompleted = AddressOf Me.OnCheckAvailabilityOperationCompleted
            End If
            Me.InvokeAsync("CheckAvailability", New Object() {userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat}, Me.CheckAvailabilityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckAvailabilityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAvailabilityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAvailabilityCompleted(Me, New CheckAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLowestQuoteByClassPartial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLowestQuoteByClassPartial( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As String,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLowestQuoteByClassPartial", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassPartialAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As String,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer)
            Me.GetLowestQuoteByClassPartialAsync(userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassPartialAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As String,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer,  _
                    ByVal userState As Object)
            If (Me.GetLowestQuoteByClassPartialOperationCompleted Is Nothing) Then
                Me.GetLowestQuoteByClassPartialOperationCompleted = AddressOf Me.OnGetLowestQuoteByClassPartialOperationCompleted
            End If
            Me.InvokeAsync("GetLowestQuoteByClassPartial", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier}, Me.GetLowestQuoteByClassPartialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLowestQuoteByClassPartialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLowestQuoteByClassPartialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLowestQuoteByClassPartialCompleted(Me, New GetLowestQuoteByClassPartialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fosoptimizerreport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fosoptimizerreport(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal modelrunid As String, ByVal databaseFROM As String) As Integer
            Dim results() As Object = Me.Invoke("fosoptimizerreport", New Object() {userid, userpw, CarrierID, recipient, modelrunid, databaseFROM})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fosoptimizerreportAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal modelrunid As String, ByVal databaseFROM As String)
            Me.fosoptimizerreportAsync(userid, userpw, CarrierID, recipient, modelrunid, databaseFROM, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fosoptimizerreportAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal modelrunid As String, ByVal databaseFROM As String, ByVal userState As Object)
            If (Me.fosoptimizerreportOperationCompleted Is Nothing) Then
                Me.fosoptimizerreportOperationCompleted = AddressOf Me.OnfosoptimizerreportOperationCompleted
            End If
            Me.InvokeAsync("fosoptimizerreport", New Object() {userid, userpw, CarrierID, recipient, modelrunid, databaseFROM}, Me.fosoptimizerreportOperationCompleted, userState)
        End Sub
        
        Private Sub OnfosoptimizerreportOperationCompleted(ByVal arg As Object)
            If (Not (Me.fosoptimizerreportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fosoptimizerreportCompleted(Me, New fosoptimizerreportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendEmail(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal bcc As String, ByVal sender As String, ByVal subject As String, ByVal body As String, ByVal isBodyHtml As Boolean, ByVal aircraftlogo As String, ByVal serviceprovider As String, ByVal showcarrier As Boolean, ByVal attachment As String) As Integer
            Dim results() As Object = Me.Invoke("SendEmail", New Object() {userid, userpw, CarrierID, recipient, bcc, sender, subject, body, isBodyHtml, aircraftlogo, serviceprovider, showcarrier, attachment})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal bcc As String, ByVal sender As String, ByVal subject As String, ByVal body As String, ByVal isBodyHtml As Boolean, ByVal aircraftlogo As String, ByVal serviceprovider As String, ByVal showcarrier As Boolean, ByVal attachment As String)
            Me.SendEmailAsync(userid, userpw, CarrierID, recipient, bcc, sender, subject, body, isBodyHtml, aircraftlogo, serviceprovider, showcarrier, attachment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal recipient As String, ByVal bcc As String, ByVal sender As String, ByVal subject As String, ByVal body As String, ByVal isBodyHtml As Boolean, ByVal aircraftlogo As String, ByVal serviceprovider As String, ByVal showcarrier As Boolean, ByVal attachment As String, ByVal userState As Object)
            If (Me.SendEmailOperationCompleted Is Nothing) Then
                Me.SendEmailOperationCompleted = AddressOf Me.OnSendEmailOperationCompleted
            End If
            Me.InvokeAsync("SendEmail", New Object() {userid, userpw, CarrierID, recipient, bcc, sender, subject, body, isBodyHtml, aircraftlogo, serviceprovider, showcarrier, attachment}, Me.SendEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailCompleted(Me, New SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PostToMsgQueue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostToMsgQueue(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String) As String
            Dim results() As Object = Me.Invoke("PostToMsgQueue", New Object() {userid, userpw, carrierid, queid, message})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostToMsgQueueAsync(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String)
            Me.PostToMsgQueueAsync(userid, userpw, carrierid, queid, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostToMsgQueueAsync(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String, ByVal userState As Object)
            If (Me.PostToMsgQueueOperationCompleted Is Nothing) Then
                Me.PostToMsgQueueOperationCompleted = AddressOf Me.OnPostToMsgQueueOperationCompleted
            End If
            Me.InvokeAsync("PostToMsgQueue", New Object() {userid, userpw, carrierid, queid, message}, Me.PostToMsgQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostToMsgQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostToMsgQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostToMsgQueueCompleted(Me, New PostToMsgQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PopFromMsgQueue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PopFromMsgQueue(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String) As String
            Dim results() As Object = Me.Invoke("PopFromMsgQueue", New Object() {userid, userpw, carrierid, queid, message})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PopFromMsgQueueAsync(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String)
            Me.PopFromMsgQueueAsync(userid, userpw, carrierid, queid, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PopFromMsgQueueAsync(ByVal userid As String, ByVal userpw As String, ByVal carrierid As Integer, ByVal queid As String, ByVal message As String, ByVal userState As Object)
            If (Me.PopFromMsgQueueOperationCompleted Is Nothing) Then
                Me.PopFromMsgQueueOperationCompleted = AddressOf Me.OnPopFromMsgQueueOperationCompleted
            End If
            Me.InvokeAsync("PopFromMsgQueue", New Object() {userid, userpw, carrierid, queid, message}, Me.PopFromMsgQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnPopFromMsgQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.PopFromMsgQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PopFromMsgQueueCompleted(Me, New PopFromMsgQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/logme", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function logme(ByVal carrierid As Integer, ByVal userid As String, ByVal message As String, ByVal callingparty As String, ByVal ip As String) As String
            Dim results() As Object = Me.Invoke("logme", New Object() {carrierid, userid, message, callingparty, ip})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub logmeAsync(ByVal carrierid As Integer, ByVal userid As String, ByVal message As String, ByVal callingparty As String, ByVal ip As String)
            Me.logmeAsync(carrierid, userid, message, callingparty, ip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub logmeAsync(ByVal carrierid As Integer, ByVal userid As String, ByVal message As String, ByVal callingparty As String, ByVal ip As String, ByVal userState As Object)
            If (Me.logmeOperationCompleted Is Nothing) Then
                Me.logmeOperationCompleted = AddressOf Me.OnlogmeOperationCompleted
            End If
            Me.InvokeAsync("logme", New Object() {carrierid, userid, message, callingparty, ip}, Me.logmeOperationCompleted, userState)
        End Sub
        
        Private Sub OnlogmeOperationCompleted(ByVal arg As Object)
            If (Not (Me.logmeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent logmeCompleted(Me, New logmeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestDelta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestDelta(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origin As String, ByVal destination As String, ByVal departure As Date, ByVal adults As Integer, ByVal children As Integer, ByVal weightclass As String) As String
            Dim results() As Object = Me.Invoke("TestDelta", New Object() {userid, userpw, CarrierID, origin, destination, departure, adults, children, weightclass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestDeltaAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origin As String, ByVal destination As String, ByVal departure As Date, ByVal adults As Integer, ByVal children As Integer, ByVal weightclass As String)
            Me.TestDeltaAsync(userid, userpw, CarrierID, origin, destination, departure, adults, children, weightclass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestDeltaAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origin As String, ByVal destination As String, ByVal departure As Date, ByVal adults As Integer, ByVal children As Integer, ByVal weightclass As String, ByVal userState As Object)
            If (Me.TestDeltaOperationCompleted Is Nothing) Then
                Me.TestDeltaOperationCompleted = AddressOf Me.OnTestDeltaOperationCompleted
            End If
            Me.InvokeAsync("TestDelta", New Object() {userid, userpw, CarrierID, origin, destination, departure, adults, children, weightclass}, Me.TestDeltaOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestDeltaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestDeltaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestDeltaCompleted(Me, New TestDeltaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeltaContract", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeltaContract(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal contract As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DeltaContract", New Object() {userid, userpw, CarrierID, contract})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeltaContractAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal contract As Integer)
            Me.DeltaContractAsync(userid, userpw, CarrierID, contract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeltaContractAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal contract As Integer, ByVal userState As Object)
            If (Me.DeltaContractOperationCompleted Is Nothing) Then
                Me.DeltaContractOperationCompleted = AddressOf Me.OnDeltaContractOperationCompleted
            End If
            Me.InvokeAsync("DeltaContract", New Object() {userid, userpw, CarrierID, contract}, Me.DeltaContractOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeltaContractOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeltaContractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeltaContractCompleted(Me, New DeltaContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetD2DQuotesByClass", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetD2DQuotesByClass( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetD2DQuotesByClass", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetD2DQuotesByClassAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer)
            Me.GetD2DQuotesByClassAsync(userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetD2DQuotesByClassAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer,  _
                    ByVal userState As Object)
            If (Me.GetD2DQuotesByClassOperationCompleted Is Nothing) Then
                Me.GetD2DQuotesByClassOperationCompleted = AddressOf Me.OnGetD2DQuotesByClassOperationCompleted
            End If
            Me.InvokeAsync("GetD2DQuotesByClass", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier}, Me.GetD2DQuotesByClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetD2DQuotesByClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetD2DQuotesByClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetD2DQuotesByClassCompleted(Me, New GetD2DQuotesByClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestQuoteD2D2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestQuoteD2D2(ByVal _origAirportCode As String, ByVal _destAirportCode As String, ByVal _departDateTime As String) As String
            Dim results() As Object = Me.Invoke("TestQuoteD2D2", New Object() {_origAirportCode, _destAirportCode, _departDateTime})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestQuoteD2D2Async(ByVal _origAirportCode As String, ByVal _destAirportCode As String, ByVal _departDateTime As String)
            Me.TestQuoteD2D2Async(_origAirportCode, _destAirportCode, _departDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestQuoteD2D2Async(ByVal _origAirportCode As String, ByVal _destAirportCode As String, ByVal _departDateTime As String, ByVal userState As Object)
            If (Me.TestQuoteD2D2OperationCompleted Is Nothing) Then
                Me.TestQuoteD2D2OperationCompleted = AddressOf Me.OnTestQuoteD2D2OperationCompleted
            End If
            Me.InvokeAsync("TestQuoteD2D2", New Object() {_origAirportCode, _destAirportCode, _departDateTime}, Me.TestQuoteD2D2OperationCompleted, userState)
        End Sub
        
        Private Sub OnTestQuoteD2D2OperationCompleted(ByVal arg As Object)
            If (Not (Me.TestQuoteD2D2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestQuoteD2D2Completed(Me, New TestQuoteD2D2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Tweet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Tweet(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal mytweet As String) As String
            Dim results() As Object = Me.Invoke("Tweet", New Object() {userid, userpw, CarrierID, mytweet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TweetAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal mytweet As String)
            Me.TweetAsync(userid, userpw, CarrierID, mytweet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TweetAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal mytweet As String, ByVal userState As Object)
            If (Me.TweetOperationCompleted Is Nothing) Then
                Me.TweetOperationCompleted = AddressOf Me.OnTweetOperationCompleted
            End If
            Me.InvokeAsync("Tweet", New Object() {userid, userpw, CarrierID, mytweet}, Me.TweetOperationCompleted, userState)
        End Sub
        
        Private Sub OnTweetOperationCompleted(ByVal arg As Object)
            If (Not (Me.TweetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TweetCompleted(Me, New TweetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMaintNext", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMaintNext(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal returndate As Date, ByVal hobbsIn As Double, ByVal cyclesIn As Integer, ByVal database As String, ByVal aircraftid As Integer) As String
            Dim results() As Object = Me.Invoke("UpdateMaintNext", New Object() {userid, userpw, CarrierID, returndate, hobbsIn, cyclesIn, database, aircraftid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintNextAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal returndate As Date, ByVal hobbsIn As Double, ByVal cyclesIn As Integer, ByVal database As String, ByVal aircraftid As Integer)
            Me.UpdateMaintNextAsync(userid, userpw, CarrierID, returndate, hobbsIn, cyclesIn, database, aircraftid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintNextAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal returndate As Date, ByVal hobbsIn As Double, ByVal cyclesIn As Integer, ByVal database As String, ByVal aircraftid As Integer, ByVal userState As Object)
            If (Me.UpdateMaintNextOperationCompleted Is Nothing) Then
                Me.UpdateMaintNextOperationCompleted = AddressOf Me.OnUpdateMaintNextOperationCompleted
            End If
            Me.InvokeAsync("UpdateMaintNext", New Object() {userid, userpw, CarrierID, returndate, hobbsIn, cyclesIn, database, aircraftid}, Me.UpdateMaintNextOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMaintNextOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMaintNextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMaintNextCompleted(Me, New UpdateMaintNextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLowestQuoteByClass", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLowestQuoteByClass( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLowestQuoteByClass", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer)
            Me.GetLowestQuoteByClassAsync(userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal weightclass As String,  _
                    ByVal passengers As Integer,  _
                    ByVal triptype As String,  _
                    ByVal usertype As String,  _
                    ByVal plantype As String,  _
                    ByVal dsflights As System.Data.DataSet,  _
                    ByVal ChkCoPilot As Boolean,  _
                    ByVal ip As String,  _
                    ByVal firstname As String,  _
                    ByVal lastname As String,  _
                    ByVal email As String,  _
                    ByVal AllowSalePerSeat As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal CarrierID As Integer,  _
                    ByVal MemberID As Integer,  _
                    ByVal MemberIDCarrier As Integer,  _
                    ByVal userState As Object)
            If (Me.GetLowestQuoteByClassOperationCompleted Is Nothing) Then
                Me.GetLowestQuoteByClassOperationCompleted = AddressOf Me.OnGetLowestQuoteByClassOperationCompleted
            End If
            Me.InvokeAsync("GetLowestQuoteByClass", New Object() {userid, userpw, weightclass, passengers, triptype, usertype, plantype, dsflights, ChkCoPilot, ip, firstname, lastname, email, AllowSalePerSeat, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, InflightEntertainment, ManufactureDate, CarrierID, MemberID, MemberIDCarrier}, Me.GetLowestQuoteByClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLowestQuoteByClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLowestQuoteByClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLowestQuoteByClassCompleted(Me, New GetLowestQuoteByClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRoundEarthDistanceFromLatLong", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoundEarthDistanceFromLatLong(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String) As Double
            Dim results() As Object = Me.Invoke("GetRoundEarthDistanceFromLatLong", New Object() {userid, userpw, CarrierID, originLocationID, destinationLocationID})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoundEarthDistanceFromLatLongAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String)
            Me.GetRoundEarthDistanceFromLatLongAsync(userid, userpw, CarrierID, originLocationID, destinationLocationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoundEarthDistanceFromLatLongAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String, ByVal userState As Object)
            If (Me.GetRoundEarthDistanceFromLatLongOperationCompleted Is Nothing) Then
                Me.GetRoundEarthDistanceFromLatLongOperationCompleted = AddressOf Me.OnGetRoundEarthDistanceFromLatLongOperationCompleted
            End If
            Me.InvokeAsync("GetRoundEarthDistanceFromLatLong", New Object() {userid, userpw, CarrierID, originLocationID, destinationLocationID}, Me.GetRoundEarthDistanceFromLatLongOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoundEarthDistanceFromLatLongOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoundEarthDistanceFromLatLongCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoundEarthDistanceFromLatLongCompleted(Me, New GetRoundEarthDistanceFromLatLongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FOSImport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FOSImport(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("FOSImport", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FOSImportAsync(ByVal ds As System.Data.DataSet)
            Me.FOSImportAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FOSImportAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.FOSImportOperationCompleted Is Nothing) Then
                Me.FOSImportOperationCompleted = AddressOf Me.OnFOSImportOperationCompleted
            End If
            Me.InvokeAsync("FOSImport", New Object() {ds}, Me.FOSImportOperationCompleted, userState)
        End Sub
        
        Private Sub OnFOSImportOperationCompleted(ByVal arg As Object)
            If (Not (Me.FOSImportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FOSImportCompleted(Me, New FOSImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FlightRequestMatch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FlightRequestMatch( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal windowhours As String,  _
                    ByVal origtime As String,  _
                    ByVal origairport1 As String,  _
                    ByVal origairport2 As String,  _
                    ByVal origairport3 As String,  _
                    ByVal origairport4 As String,  _
                    ByVal origairport5 As String,  _
                    ByVal termairport1 As String,  _
                    ByVal termairport2 As String,  _
                    ByVal termairport3 As String,  _
                    ByVal termairport4 As String,  _
                    ByVal termairport5 As String,  _
                    ByVal SeatsRequested As String) As String
            Dim results() As Object = Me.Invoke("FlightRequestMatch", New Object() {userid, userpw, CarrierID, windowhours, origtime, origairport1, origairport2, origairport3, origairport4, origairport5, termairport1, termairport2, termairport3, termairport4, termairport5, SeatsRequested})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FlightRequestMatchAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal windowhours As String,  _
                    ByVal origtime As String,  _
                    ByVal origairport1 As String,  _
                    ByVal origairport2 As String,  _
                    ByVal origairport3 As String,  _
                    ByVal origairport4 As String,  _
                    ByVal origairport5 As String,  _
                    ByVal termairport1 As String,  _
                    ByVal termairport2 As String,  _
                    ByVal termairport3 As String,  _
                    ByVal termairport4 As String,  _
                    ByVal termairport5 As String,  _
                    ByVal SeatsRequested As String)
            Me.FlightRequestMatchAsync(userid, userpw, CarrierID, windowhours, origtime, origairport1, origairport2, origairport3, origairport4, origairport5, termairport1, termairport2, termairport3, termairport4, termairport5, SeatsRequested, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FlightRequestMatchAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal windowhours As String,  _
                    ByVal origtime As String,  _
                    ByVal origairport1 As String,  _
                    ByVal origairport2 As String,  _
                    ByVal origairport3 As String,  _
                    ByVal origairport4 As String,  _
                    ByVal origairport5 As String,  _
                    ByVal termairport1 As String,  _
                    ByVal termairport2 As String,  _
                    ByVal termairport3 As String,  _
                    ByVal termairport4 As String,  _
                    ByVal termairport5 As String,  _
                    ByVal SeatsRequested As String,  _
                    ByVal userState As Object)
            If (Me.FlightRequestMatchOperationCompleted Is Nothing) Then
                Me.FlightRequestMatchOperationCompleted = AddressOf Me.OnFlightRequestMatchOperationCompleted
            End If
            Me.InvokeAsync("FlightRequestMatch", New Object() {userid, userpw, CarrierID, windowhours, origtime, origairport1, origairport2, origairport3, origairport4, origairport5, termairport1, termairport2, termairport3, termairport4, termairport5, SeatsRequested}, Me.FlightRequestMatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnFlightRequestMatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.FlightRequestMatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FlightRequestMatchCompleted(Me, New FlightRequestMatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FlightRequestReserve", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FlightRequestReserve(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal addlbs As String, ByVal SeatsRequested As String, ByVal FlightRequestRec As String) As String
            Dim results() As Object = Me.Invoke("FlightRequestReserve", New Object() {userid, userpw, CarrierID, addlbs, SeatsRequested, FlightRequestRec})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FlightRequestReserveAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal addlbs As String, ByVal SeatsRequested As String, ByVal FlightRequestRec As String)
            Me.FlightRequestReserveAsync(userid, userpw, CarrierID, addlbs, SeatsRequested, FlightRequestRec, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FlightRequestReserveAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal addlbs As String, ByVal SeatsRequested As String, ByVal FlightRequestRec As String, ByVal userState As Object)
            If (Me.FlightRequestReserveOperationCompleted Is Nothing) Then
                Me.FlightRequestReserveOperationCompleted = AddressOf Me.OnFlightRequestReserveOperationCompleted
            End If
            Me.InvokeAsync("FlightRequestReserve", New Object() {userid, userpw, CarrierID, addlbs, SeatsRequested, FlightRequestRec}, Me.FlightRequestReserveOperationCompleted, userState)
        End Sub
        
        Private Sub OnFlightRequestReserveOperationCompleted(ByVal arg As Object)
            If (Not (Me.FlightRequestReserveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FlightRequestReserveCompleted(Me, New FlightRequestReserveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FlightRequestUpload", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FlightRequestUpload(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origtime As String, ByVal OriginLocationID As String, ByVal DestLocationID As String, ByVal airmiles As String, ByVal flightestdurationmins As String, ByVal PricePerPlane As String, ByVal PricePerSeat As String, ByVal AvailableSeats As String, ByVal EquipType As String, ByVal EquipURL As String) As String
            Dim results() As Object = Me.Invoke("FlightRequestUpload", New Object() {userid, userpw, CarrierID, origtime, OriginLocationID, DestLocationID, airmiles, flightestdurationmins, PricePerPlane, PricePerSeat, AvailableSeats, EquipType, EquipURL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FlightRequestUploadAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origtime As String, ByVal OriginLocationID As String, ByVal DestLocationID As String, ByVal airmiles As String, ByVal flightestdurationmins As String, ByVal PricePerPlane As String, ByVal PricePerSeat As String, ByVal AvailableSeats As String, ByVal EquipType As String, ByVal EquipURL As String)
            Me.FlightRequestUploadAsync(userid, userpw, CarrierID, origtime, OriginLocationID, DestLocationID, airmiles, flightestdurationmins, PricePerPlane, PricePerSeat, AvailableSeats, EquipType, EquipURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FlightRequestUploadAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal origtime As String, ByVal OriginLocationID As String, ByVal DestLocationID As String, ByVal airmiles As String, ByVal flightestdurationmins As String, ByVal PricePerPlane As String, ByVal PricePerSeat As String, ByVal AvailableSeats As String, ByVal EquipType As String, ByVal EquipURL As String, ByVal userState As Object)
            If (Me.FlightRequestUploadOperationCompleted Is Nothing) Then
                Me.FlightRequestUploadOperationCompleted = AddressOf Me.OnFlightRequestUploadOperationCompleted
            End If
            Me.InvokeAsync("FlightRequestUpload", New Object() {userid, userpw, CarrierID, origtime, OriginLocationID, DestLocationID, airmiles, flightestdurationmins, PricePerPlane, PricePerSeat, AvailableSeats, EquipType, EquipURL}, Me.FlightRequestUploadOperationCompleted, userState)
        End Sub
        
        Private Sub OnFlightRequestUploadOperationCompleted(ByVal arg As Object)
            If (Not (Me.FlightRequestUploadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FlightRequestUploadCompleted(Me, New FlightRequestUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FlightRequestCancel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FlightRequestCancel(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal FlightRequestRec As String) As String
            Dim results() As Object = Me.Invoke("FlightRequestCancel", New Object() {userid, userpw, CarrierID, FlightRequestRec})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FlightRequestCancelAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal FlightRequestRec As String)
            Me.FlightRequestCancelAsync(userid, userpw, CarrierID, FlightRequestRec, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FlightRequestCancelAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal FlightRequestRec As String, ByVal userState As Object)
            If (Me.FlightRequestCancelOperationCompleted Is Nothing) Then
                Me.FlightRequestCancelOperationCompleted = AddressOf Me.OnFlightRequestCancelOperationCompleted
            End If
            Me.InvokeAsync("FlightRequestCancel", New Object() {userid, userpw, CarrierID, FlightRequestRec}, Me.FlightRequestCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnFlightRequestCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.FlightRequestCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FlightRequestCancelCompleted(Me, New FlightRequestCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CarrierFlights", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarrierFlights(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal fromdate As String, ByVal todate As String) As String
            Dim results() As Object = Me.Invoke("CarrierFlights", New Object() {userid, userpw, CarrierID, fromdate, todate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarrierFlightsAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal fromdate As String, ByVal todate As String)
            Me.CarrierFlightsAsync(userid, userpw, CarrierID, fromdate, todate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarrierFlightsAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal fromdate As String, ByVal todate As String, ByVal userState As Object)
            If (Me.CarrierFlightsOperationCompleted Is Nothing) Then
                Me.CarrierFlightsOperationCompleted = AddressOf Me.OnCarrierFlightsOperationCompleted
            End If
            Me.InvokeAsync("CarrierFlights", New Object() {userid, userpw, CarrierID, fromdate, todate}, Me.CarrierFlightsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarrierFlightsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarrierFlightsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarrierFlightsCompleted(Me, New CarrierFlightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getdistance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getdistance(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal a As String, ByVal b As String) As String
            Dim results() As Object = Me.Invoke("getdistance", New Object() {userid, userpw, CarrierID, a, b})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getdistanceAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal a As String, ByVal b As String)
            Me.getdistanceAsync(userid, userpw, CarrierID, a, b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getdistanceAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal a As String, ByVal b As String, ByVal userState As Object)
            If (Me.getdistanceOperationCompleted Is Nothing) Then
                Me.getdistanceOperationCompleted = AddressOf Me.OngetdistanceOperationCompleted
            End If
            Me.InvokeAsync("getdistance", New Object() {userid, userpw, CarrierID, a, b}, Me.getdistanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetdistanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getdistanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getdistanceCompleted(Me, New getdistanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AOE", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AOE(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String) As String
            Dim results() As Object = Me.Invoke("AOE", New Object() {userid, userpw, CarrierID, airport})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AOEAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String)
            Me.AOEAsync(userid, userpw, CarrierID, airport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AOEAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String, ByVal userState As Object)
            If (Me.AOEOperationCompleted Is Nothing) Then
                Me.AOEOperationCompleted = AddressOf Me.OnAOEOperationCompleted
            End If
            Me.InvokeAsync("AOE", New Object() {userid, userpw, CarrierID, airport}, Me.AOEOperationCompleted, userState)
        End Sub
        
        Private Sub OnAOEOperationCompleted(ByVal arg As Object)
            If (Not (Me.AOECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AOECompleted(Me, New AOECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AirportLongLat", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AirportLongLat(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String) As String
            Dim results() As Object = Me.Invoke("AirportLongLat", New Object() {userid, userpw, CarrierID, airport})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AirportLongLatAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String)
            Me.AirportLongLatAsync(userid, userpw, CarrierID, airport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AirportLongLatAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airport As String, ByVal userState As Object)
            If (Me.AirportLongLatOperationCompleted Is Nothing) Then
                Me.AirportLongLatOperationCompleted = AddressOf Me.OnAirportLongLatOperationCompleted
            End If
            Me.InvokeAsync("AirportLongLat", New Object() {userid, userpw, CarrierID, airport}, Me.AirportLongLatOperationCompleted, userState)
        End Sub
        
        Private Sub OnAirportLongLatOperationCompleted(ByVal arg As Object)
            If (Not (Me.AirportLongLatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AirportLongLatCompleted(Me, New AirportLongLatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AOEbyCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AOEbyCountry(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal country As String) As String
            Dim results() As Object = Me.Invoke("AOEbyCountry", New Object() {userid, userpw, CarrierID, country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AOEbyCountryAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal country As String)
            Me.AOEbyCountryAsync(userid, userpw, CarrierID, country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AOEbyCountryAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal country As String, ByVal userState As Object)
            If (Me.AOEbyCountryOperationCompleted Is Nothing) Then
                Me.AOEbyCountryOperationCompleted = AddressOf Me.OnAOEbyCountryOperationCompleted
            End If
            Me.InvokeAsync("AOEbyCountry", New Object() {userid, userpw, CarrierID, country}, Me.AOEbyCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAOEbyCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AOEbyCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AOEbyCountryCompleted(Me, New AOEbyCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAirRoutes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAirRoutes(ByVal userid As String, ByVal userpw As String, ByRef CarrierID As Integer, ByVal originLatitude As String, ByVal originLongitude As String, ByVal destLatitude As String, ByVal destLongitude As String, ByVal minimumRunwayLength As String, ByVal averageAircraftSpeedMph As String, ByVal startDateTime As String, ByVal endDateTime As String, ByVal checkAlternateFlights As String) As String
            Dim results() As Object = Me.Invoke("GetAirRoutes", New Object() {userid, userpw, CarrierID, originLatitude, originLongitude, destLatitude, destLongitude, minimumRunwayLength, averageAircraftSpeedMph, startDateTime, endDateTime, checkAlternateFlights})
            CarrierID = CType(results(1),Integer)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAirRoutesAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLatitude As String, ByVal originLongitude As String, ByVal destLatitude As String, ByVal destLongitude As String, ByVal minimumRunwayLength As String, ByVal averageAircraftSpeedMph As String, ByVal startDateTime As String, ByVal endDateTime As String, ByVal checkAlternateFlights As String)
            Me.GetAirRoutesAsync(userid, userpw, CarrierID, originLatitude, originLongitude, destLatitude, destLongitude, minimumRunwayLength, averageAircraftSpeedMph, startDateTime, endDateTime, checkAlternateFlights, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAirRoutesAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLatitude As String, ByVal originLongitude As String, ByVal destLatitude As String, ByVal destLongitude As String, ByVal minimumRunwayLength As String, ByVal averageAircraftSpeedMph As String, ByVal startDateTime As String, ByVal endDateTime As String, ByVal checkAlternateFlights As String, ByVal userState As Object)
            If (Me.GetAirRoutesOperationCompleted Is Nothing) Then
                Me.GetAirRoutesOperationCompleted = AddressOf Me.OnGetAirRoutesOperationCompleted
            End If
            Me.InvokeAsync("GetAirRoutes", New Object() {userid, userpw, CarrierID, originLatitude, originLongitude, destLatitude, destLongitude, minimumRunwayLength, averageAircraftSpeedMph, startDateTime, endDateTime, checkAlternateFlights}, Me.GetAirRoutesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAirRoutesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAirRoutesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAirRoutesCompleted(Me, New GetAirRoutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNearbyAirportsByLatitudeLongitudeWithinDistance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNearbyAirportsByLatitudeLongitudeWithinDistance(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String) As String
            Dim results() As Object = Me.Invoke("GetNearbyAirportsByLatitudeLongitudeWithinDistance", New Object() {userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNearbyAirportsByLatitudeLongitudeWithinDistanceAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String)
            Me.GetNearbyAirportsByLatitudeLongitudeWithinDistanceAsync(userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNearbyAirportsByLatitudeLongitudeWithinDistanceAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String, ByVal userState As Object)
            If (Me.GetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted Is Nothing) Then
                Me.GetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted = AddressOf Me.OnGetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted
            End If
            Me.InvokeAsync("GetNearbyAirportsByLatitudeLongitudeWithinDistance", New Object() {userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count}, Me.GetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNearbyAirportsByLatitudeLongitudeWithinDistanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompleted(Me, New GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionalAirportsByCarriers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRegionalAirportsByCarriers(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String) As String
            Dim results() As Object = Me.Invoke("GetRegionalAirportsByCarriers", New Object() {userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRegionalAirportsByCarriersAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String)
            Me.GetRegionalAirportsByCarriersAsync(userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRegionalAirportsByCarriersAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal latitude As String, ByVal longitude As String, ByVal minimumRunwayLength As String, ByVal miles As String, ByVal count As String, ByVal userState As Object)
            If (Me.GetRegionalAirportsByCarriersOperationCompleted Is Nothing) Then
                Me.GetRegionalAirportsByCarriersOperationCompleted = AddressOf Me.OnGetRegionalAirportsByCarriersOperationCompleted
            End If
            Me.InvokeAsync("GetRegionalAirportsByCarriers", New Object() {userid, userpw, CarrierID, latitude, longitude, minimumRunwayLength, miles, count}, Me.GetRegionalAirportsByCarriersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRegionalAirportsByCarriersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRegionalAirportsByCarriersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRegionalAirportsByCarriersCompleted(Me, New GetRegionalAirportsByCarriersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllAirportsInState", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllAirportsInState(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllAirportsInState", New Object() {userid, userpw, CarrierID, state, minimumRunwayLength})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllAirportsInStateAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer)
            Me.GetAllAirportsInStateAsync(userid, userpw, CarrierID, state, minimumRunwayLength, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllAirportsInStateAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer, ByVal userState As Object)
            If (Me.GetAllAirportsInStateOperationCompleted Is Nothing) Then
                Me.GetAllAirportsInStateOperationCompleted = AddressOf Me.OnGetAllAirportsInStateOperationCompleted
            End If
            Me.InvokeAsync("GetAllAirportsInState", New Object() {userid, userpw, CarrierID, state, minimumRunwayLength}, Me.GetAllAirportsInStateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllAirportsInStateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllAirportsInStateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllAirportsInStateCompleted(Me, New GetAllAirportsInStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAirportsInStateRunwayInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAirportsInStateRunwayInfo(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer, ByVal maximumRunwayLength As Integer, ByVal employMaximumRunwayLength As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAirportsInStateRunwayInfo", New Object() {userid, userpw, CarrierID, state, minimumRunwayLength, maximumRunwayLength, employMaximumRunwayLength})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAirportsInStateRunwayInfoAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer, ByVal maximumRunwayLength As Integer, ByVal employMaximumRunwayLength As Boolean)
            Me.GetAirportsInStateRunwayInfoAsync(userid, userpw, CarrierID, state, minimumRunwayLength, maximumRunwayLength, employMaximumRunwayLength, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAirportsInStateRunwayInfoAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal state As String, ByVal minimumRunwayLength As Integer, ByVal maximumRunwayLength As Integer, ByVal employMaximumRunwayLength As Boolean, ByVal userState As Object)
            If (Me.GetAirportsInStateRunwayInfoOperationCompleted Is Nothing) Then
                Me.GetAirportsInStateRunwayInfoOperationCompleted = AddressOf Me.OnGetAirportsInStateRunwayInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAirportsInStateRunwayInfo", New Object() {userid, userpw, CarrierID, state, minimumRunwayLength, maximumRunwayLength, employMaximumRunwayLength}, Me.GetAirportsInStateRunwayInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAirportsInStateRunwayInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAirportsInStateRunwayInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAirportsInStateRunwayInfoCompleted(Me, New GetAirportsInStateRunwayInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRoundEarthDistanceBetweenLocations", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoundEarthDistanceBetweenLocations(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String) As Double
            Dim results() As Object = Me.Invoke("GetRoundEarthDistanceBetweenLocations", New Object() {userid, userpw, CarrierID, originLocationID, destinationLocationID})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoundEarthDistanceBetweenLocationsAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String)
            Me.GetRoundEarthDistanceBetweenLocationsAsync(userid, userpw, CarrierID, originLocationID, destinationLocationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoundEarthDistanceBetweenLocationsAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal originLocationID As String, ByVal destinationLocationID As String, ByVal userState As Object)
            If (Me.GetRoundEarthDistanceBetweenLocationsOperationCompleted Is Nothing) Then
                Me.GetRoundEarthDistanceBetweenLocationsOperationCompleted = AddressOf Me.OnGetRoundEarthDistanceBetweenLocationsOperationCompleted
            End If
            Me.InvokeAsync("GetRoundEarthDistanceBetweenLocations", New Object() {userid, userpw, CarrierID, originLocationID, destinationLocationID}, Me.GetRoundEarthDistanceBetweenLocationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoundEarthDistanceBetweenLocationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoundEarthDistanceBetweenLocationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoundEarthDistanceBetweenLocationsCompleted(Me, New GetRoundEarthDistanceBetweenLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAirportInformationByAirportCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAirportInformationByAirportCode(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airportCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAirportInformationByAirportCode", New Object() {userid, userpw, CarrierID, airportCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAirportInformationByAirportCodeAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airportCode As String)
            Me.GetAirportInformationByAirportCodeAsync(userid, userpw, CarrierID, airportCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAirportInformationByAirportCodeAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal airportCode As String, ByVal userState As Object)
            If (Me.GetAirportInformationByAirportCodeOperationCompleted Is Nothing) Then
                Me.GetAirportInformationByAirportCodeOperationCompleted = AddressOf Me.OnGetAirportInformationByAirportCodeOperationCompleted
            End If
            Me.InvokeAsync("GetAirportInformationByAirportCode", New Object() {userid, userpw, CarrierID, airportCode}, Me.GetAirportInformationByAirportCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAirportInformationByAirportCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAirportInformationByAirportCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAirportInformationByAirportCodeCompleted(Me, New GetAirportInformationByAirportCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/clickcount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function clickcount() As Integer
            Dim results() As Object = Me.Invoke("clickcount", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub clickcountAsync()
            Me.clickcountAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub clickcountAsync(ByVal userState As Object)
            If (Me.clickcountOperationCompleted Is Nothing) Then
                Me.clickcountOperationCompleted = AddressOf Me.OnclickcountOperationCompleted
            End If
            Me.InvokeAsync("clickcount", New Object(-1) {}, Me.clickcountOperationCompleted, userState)
        End Sub
        
        Private Sub OnclickcountOperationCompleted(ByVal arg As Object)
            If (Not (Me.clickcountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent clickcountCompleted(Me, New clickcountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecordMaintenanceEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecordMaintenanceEvent( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal AircraftID As String,  _
                    ByVal CurrentHobbs As Double,  _
                    ByVal CurrentCycles As Integer,  _
                    ByVal CurrentAirport As String,  _
                    ByVal ServiceAirport As String,  _
                    ByVal StatusEffectiveUTC As Date,  _
                    ByVal Status As String,  _
                    ByVal Description As String,  _
                    ByVal NextHobbsServiceDue As Double,  _
                    ByVal NextHobbsServiceItem As String,  _
                    ByVal NextDateServiceDue As Date,  _
                    ByVal NextDateServiceItem As String,  _
                    ByVal NextCyclesServiceDue As Integer,  _
                    ByVal NextCyclesServiceItem As String,  _
                    ByVal databaseName As String) As String
            Dim results() As Object = Me.Invoke("RecordMaintenanceEvent", New Object() {userid, userpw, CarrierID, AircraftID, CurrentHobbs, CurrentCycles, CurrentAirport, ServiceAirport, StatusEffectiveUTC, Status, Description, NextHobbsServiceDue, NextHobbsServiceItem, NextDateServiceDue, NextDateServiceItem, NextCyclesServiceDue, NextCyclesServiceItem, databaseName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecordMaintenanceEventAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal AircraftID As String,  _
                    ByVal CurrentHobbs As Double,  _
                    ByVal CurrentCycles As Integer,  _
                    ByVal CurrentAirport As String,  _
                    ByVal ServiceAirport As String,  _
                    ByVal StatusEffectiveUTC As Date,  _
                    ByVal Status As String,  _
                    ByVal Description As String,  _
                    ByVal NextHobbsServiceDue As Double,  _
                    ByVal NextHobbsServiceItem As String,  _
                    ByVal NextDateServiceDue As Date,  _
                    ByVal NextDateServiceItem As String,  _
                    ByVal NextCyclesServiceDue As Integer,  _
                    ByVal NextCyclesServiceItem As String,  _
                    ByVal databaseName As String)
            Me.RecordMaintenanceEventAsync(userid, userpw, CarrierID, AircraftID, CurrentHobbs, CurrentCycles, CurrentAirport, ServiceAirport, StatusEffectiveUTC, Status, Description, NextHobbsServiceDue, NextHobbsServiceItem, NextDateServiceDue, NextDateServiceItem, NextCyclesServiceDue, NextCyclesServiceItem, databaseName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecordMaintenanceEventAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal AircraftID As String,  _
                    ByVal CurrentHobbs As Double,  _
                    ByVal CurrentCycles As Integer,  _
                    ByVal CurrentAirport As String,  _
                    ByVal ServiceAirport As String,  _
                    ByVal StatusEffectiveUTC As Date,  _
                    ByVal Status As String,  _
                    ByVal Description As String,  _
                    ByVal NextHobbsServiceDue As Double,  _
                    ByVal NextHobbsServiceItem As String,  _
                    ByVal NextDateServiceDue As Date,  _
                    ByVal NextDateServiceItem As String,  _
                    ByVal NextCyclesServiceDue As Integer,  _
                    ByVal NextCyclesServiceItem As String,  _
                    ByVal databaseName As String,  _
                    ByVal userState As Object)
            If (Me.RecordMaintenanceEventOperationCompleted Is Nothing) Then
                Me.RecordMaintenanceEventOperationCompleted = AddressOf Me.OnRecordMaintenanceEventOperationCompleted
            End If
            Me.InvokeAsync("RecordMaintenanceEvent", New Object() {userid, userpw, CarrierID, AircraftID, CurrentHobbs, CurrentCycles, CurrentAirport, ServiceAirport, StatusEffectiveUTC, Status, Description, NextHobbsServiceDue, NextHobbsServiceItem, NextDateServiceDue, NextDateServiceItem, NextCyclesServiceDue, NextCyclesServiceItem, databaseName}, Me.RecordMaintenanceEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecordMaintenanceEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecordMaintenanceEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecordMaintenanceEventCompleted(Me, New RecordMaintenanceEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OptimizeCASWeb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OptimizeCASWeb(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal commit As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal databaseName As String, ByVal AllowSalePerSeat As Boolean) As String
            Dim results() As Object = Me.Invoke("OptimizeCASWeb", New Object() {userid, userpw, CarrierID, commit, fromdate, todate, opttype, databaseName, AllowSalePerSeat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASWebAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal commit As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal databaseName As String, ByVal AllowSalePerSeat As Boolean)
            Me.OptimizeCASWebAsync(userid, userpw, CarrierID, commit, fromdate, todate, opttype, databaseName, AllowSalePerSeat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASWebAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal commit As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal databaseName As String, ByVal AllowSalePerSeat As Boolean, ByVal userState As Object)
            If (Me.OptimizeCASWebOperationCompleted Is Nothing) Then
                Me.OptimizeCASWebOperationCompleted = AddressOf Me.OnOptimizeCASWebOperationCompleted
            End If
            Me.InvokeAsync("OptimizeCASWeb", New Object() {userid, userpw, CarrierID, commit, fromdate, todate, opttype, databaseName, AllowSalePerSeat}, Me.OptimizeCASWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnOptimizeCASWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.OptimizeCASWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OptimizeCASWebCompleted(Me, New OptimizeCASWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OptimizeCASWebSmall", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OptimizeCASWebSmall(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircraftid As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean) As String
            Dim results() As Object = Me.Invoke("OptimizeCASWebSmall", New Object() {userid, userpw, commit, aircraftid, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASWebSmallAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircraftid As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean)
            Me.OptimizeCASWebSmallAsync(userid, userpw, commit, aircraftid, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASWebSmallAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircraftid As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean, ByVal userState As Object)
            If (Me.OptimizeCASWebSmallOperationCompleted Is Nothing) Then
                Me.OptimizeCASWebSmallOperationCompleted = AddressOf Me.OnOptimizeCASWebSmallOperationCompleted
            End If
            Me.InvokeAsync("OptimizeCASWebSmall", New Object() {userid, userpw, commit, aircraftid, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat}, Me.OptimizeCASWebSmallOperationCompleted, userState)
        End Sub
        
        Private Sub OnOptimizeCASWebSmallOperationCompleted(ByVal arg As Object)
            If (Not (Me.OptimizeCASWebSmallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OptimizeCASWebSmallCompleted(Me, New OptimizeCASWebSmallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OptimizeCASRepositionCost", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OptimizeCASRepositionCost(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean) As String
            Dim results() As Object = Me.Invoke("OptimizeCASRepositionCost", New Object() {userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASRepositionCostAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean)
            Me.OptimizeCASRepositionCostAsync(userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OptimizeCASRepositionCostAsync(ByVal userid As String, ByVal userpw As String, ByVal commit As String, ByVal aircrafttype As String, ByVal FromApt As String, ByVal ToApt As String, ByVal fromdate As Date, ByVal todate As Date, ByVal opttype As String, ByVal flightrequestid As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal AllowSalePerSeat As Boolean, ByVal userState As Object)
            If (Me.OptimizeCASRepositionCostOperationCompleted Is Nothing) Then
                Me.OptimizeCASRepositionCostOperationCompleted = AddressOf Me.OnOptimizeCASRepositionCostOperationCompleted
            End If
            Me.InvokeAsync("OptimizeCASRepositionCost", New Object() {userid, userpw, commit, aircrafttype, FromApt, ToApt, fromdate, todate, opttype, flightrequestid, databaseName, CarrierID, AllowSalePerSeat}, Me.OptimizeCASRepositionCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnOptimizeCASRepositionCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.OptimizeCASRepositionCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OptimizeCASRepositionCostCompleted(Me, New OptimizeCASRepositionCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/payment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function payment(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal amount As String, ByVal cardnumber As String, ByVal expmonth As String, ByVal expyear As String, ByVal firstname As String, ByVal lastname As String, ByVal address1 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal transtype As String) As String
            Dim results() As Object = Me.Invoke("payment", New Object() {userid, userpw, CarrierID, amount, cardnumber, expmonth, expyear, firstname, lastname, address1, city, state, zip, transtype})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub paymentAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal amount As String, ByVal cardnumber As String, ByVal expmonth As String, ByVal expyear As String, ByVal firstname As String, ByVal lastname As String, ByVal address1 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal transtype As String)
            Me.paymentAsync(userid, userpw, CarrierID, amount, cardnumber, expmonth, expyear, firstname, lastname, address1, city, state, zip, transtype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub paymentAsync(ByVal userid As String, ByVal userpw As String, ByVal CarrierID As Integer, ByVal amount As String, ByVal cardnumber As String, ByVal expmonth As String, ByVal expyear As String, ByVal firstname As String, ByVal lastname As String, ByVal address1 As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal transtype As String, ByVal userState As Object)
            If (Me.paymentOperationCompleted Is Nothing) Then
                Me.paymentOperationCompleted = AddressOf Me.OnpaymentOperationCompleted
            End If
            Me.InvokeAsync("payment", New Object() {userid, userpw, CarrierID, amount, cardnumber, expmonth, expyear, firstname, lastname, address1, city, state, zip, transtype}, Me.paymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnpaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.paymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent paymentCompleted(Me, New paymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLowestQuoteByClassXMLTEST", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLowestQuoteByClassXMLTEST( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal weightclass As String,  _
                    ByVal triptype As String,  _
                    ByVal d2d As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As Boolean,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal ACTypeID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLowestQuoteByClassXMLTEST", New Object() {userid, userpw, CarrierID, weightclass, triptype, d2d, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, ACTypeID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassXMLTESTAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal weightclass As String,  _
                    ByVal triptype As String,  _
                    ByVal d2d As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As Boolean,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal ACTypeID As Integer)
            Me.GetLowestQuoteByClassXMLTESTAsync(userid, userpw, CarrierID, weightclass, triptype, d2d, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, ACTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLowestQuoteByClassXMLTESTAsync( _
                    ByVal userid As String,  _
                    ByVal userpw As String,  _
                    ByVal CarrierID As Integer,  _
                    ByVal weightclass As String,  _
                    ByVal triptype As String,  _
                    ByVal d2d As Boolean,  _
                    ByVal AllowPets As Boolean,  _
                    ByVal AllowSmoking As Boolean,  _
                    ByVal WiFi As Boolean,  _
                    ByVal EnclosedLav As Boolean,  _
                    ByVal PowerAvailable As Boolean,  _
                    ByVal BrokerID As Integer,  _
                    ByVal actoinclude As Boolean,  _
                    ByVal InflightEntertainment As Boolean,  _
                    ByVal ManufactureDate As Date,  _
                    ByVal ACTypeID As Integer,  _
                    ByVal userState As Object)
            If (Me.GetLowestQuoteByClassXMLTESTOperationCompleted Is Nothing) Then
                Me.GetLowestQuoteByClassXMLTESTOperationCompleted = AddressOf Me.OnGetLowestQuoteByClassXMLTESTOperationCompleted
            End If
            Me.InvokeAsync("GetLowestQuoteByClassXMLTEST", New Object() {userid, userpw, CarrierID, weightclass, triptype, d2d, AllowPets, AllowSmoking, WiFi, EnclosedLav, PowerAvailable, BrokerID, actoinclude, InflightEntertainment, ManufactureDate, ACTypeID}, Me.GetLowestQuoteByClassXMLTESTOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLowestQuoteByClassXMLTESTOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLowestQuoteByClassXMLTESTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLowestQuoteByClassXMLTESTCompleted(Me, New GetLowestQuoteByClassXMLTESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HistoricalReposition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HistoricalReposition(ByVal userid As String, ByVal userpw As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal airport As String, ByVal aircrafttype As Integer) As String
            Dim results() As Object = Me.Invoke("HistoricalReposition", New Object() {userid, userpw, databaseName, CarrierID, airport, aircrafttype})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HistoricalRepositionAsync(ByVal userid As String, ByVal userpw As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal airport As String, ByVal aircrafttype As Integer)
            Me.HistoricalRepositionAsync(userid, userpw, databaseName, CarrierID, airport, aircrafttype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HistoricalRepositionAsync(ByVal userid As String, ByVal userpw As String, ByVal databaseName As String, ByVal CarrierID As Integer, ByVal airport As String, ByVal aircrafttype As Integer, ByVal userState As Object)
            If (Me.HistoricalRepositionOperationCompleted Is Nothing) Then
                Me.HistoricalRepositionOperationCompleted = AddressOf Me.OnHistoricalRepositionOperationCompleted
            End If
            Me.InvokeAsync("HistoricalReposition", New Object() {userid, userpw, databaseName, CarrierID, airport, aircrafttype}, Me.HistoricalRepositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnHistoricalRepositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.HistoricalRepositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HistoricalRepositionCompleted(Me, New HistoricalRepositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BART", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BART(ByVal carrierid As String, ByVal sqldata As String) As String
            Dim results() As Object = Me.Invoke("BART", New Object() {carrierid, sqldata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BARTAsync(ByVal carrierid As String, ByVal sqldata As String)
            Me.BARTAsync(carrierid, sqldata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BARTAsync(ByVal carrierid As String, ByVal sqldata As String, ByVal userState As Object)
            If (Me.BARTOperationCompleted Is Nothing) Then
                Me.BARTOperationCompleted = AddressOf Me.OnBARTOperationCompleted
            End If
            Me.InvokeAsync("BART", New Object() {carrierid, sqldata}, Me.BARTOperationCompleted, userState)
        End Sub
        
        Private Sub OnBARTOperationCompleted(ByVal arg As Object)
            If (Not (Me.BARTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BARTCompleted(Me, New BARTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Stats", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Stats(ByVal carrierid As String, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date) As String
            Dim results() As Object = Me.Invoke("Stats", New Object() {carrierid, nm, dh, departdategmt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatsAsync(ByVal carrierid As String, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date)
            Me.StatsAsync(carrierid, nm, dh, departdategmt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatsAsync(ByVal carrierid As String, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date, ByVal userState As Object)
            If (Me.StatsOperationCompleted Is Nothing) Then
                Me.StatsOperationCompleted = AddressOf Me.OnStatsOperationCompleted
            End If
            Me.InvokeAsync("Stats", New Object() {carrierid, nm, dh, departdategmt}, Me.StatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatsCompleted(Me, New StatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TranslateCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TranslateCode(ByVal carrierid As String, ByVal name As String, ByVal value As String) As String
            Dim results() As Object = Me.Invoke("TranslateCode", New Object() {carrierid, name, value})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TranslateCodeAsync(ByVal carrierid As String, ByVal name As String, ByVal value As String)
            Me.TranslateCodeAsync(carrierid, name, value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TranslateCodeAsync(ByVal carrierid As String, ByVal name As String, ByVal value As String, ByVal userState As Object)
            If (Me.TranslateCodeOperationCompleted Is Nothing) Then
                Me.TranslateCodeOperationCompleted = AddressOf Me.OnTranslateCodeOperationCompleted
            End If
            Me.InvokeAsync("TranslateCode", New Object() {carrierid, name, value}, Me.TranslateCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnTranslateCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.TranslateCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TranslateCodeCompleted(Me, New TranslateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StatsType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatsType(ByVal carrierid As String, ByVal type As String, ByVal lpc As String, ByVal ete As Integer, ByVal cnt As Integer, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date) As String
            Dim results() As Object = Me.Invoke("StatsType", New Object() {carrierid, type, lpc, ete, cnt, nm, dh, departdategmt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatsTypeAsync(ByVal carrierid As String, ByVal type As String, ByVal lpc As String, ByVal ete As Integer, ByVal cnt As Integer, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date)
            Me.StatsTypeAsync(carrierid, type, lpc, ete, cnt, nm, dh, departdategmt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatsTypeAsync(ByVal carrierid As String, ByVal type As String, ByVal lpc As String, ByVal ete As Integer, ByVal cnt As Integer, ByVal nm As Integer, ByVal dh As Boolean, ByVal departdategmt As Date, ByVal userState As Object)
            If (Me.StatsTypeOperationCompleted Is Nothing) Then
                Me.StatsTypeOperationCompleted = AddressOf Me.OnStatsTypeOperationCompleted
            End If
            Me.InvokeAsync("StatsType", New Object() {carrierid, type, lpc, ete, cnt, nm, dh, departdategmt}, Me.StatsTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatsTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatsTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatsTypeCompleted(Me, New StatsTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/codes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function codes(ByVal carrierid As String, ByVal foskey As String, ByVal name As String, ByVal inactive As String, ByVal value As String, ByVal code As String, ByVal description As String) As String
            Dim results() As Object = Me.Invoke("codes", New Object() {carrierid, foskey, name, inactive, value, code, description})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub codesAsync(ByVal carrierid As String, ByVal foskey As String, ByVal name As String, ByVal inactive As String, ByVal value As String, ByVal code As String, ByVal description As String)
            Me.codesAsync(carrierid, foskey, name, inactive, value, code, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub codesAsync(ByVal carrierid As String, ByVal foskey As String, ByVal name As String, ByVal inactive As String, ByVal value As String, ByVal code As String, ByVal description As String, ByVal userState As Object)
            If (Me.codesOperationCompleted Is Nothing) Then
                Me.codesOperationCompleted = AddressOf Me.OncodesOperationCompleted
            End If
            Me.InvokeAsync("codes", New Object() {carrierid, foskey, name, inactive, value, code, description}, Me.codesOperationCompleted, userState)
        End Sub
        
        Private Sub OncodesOperationCompleted(ByVal arg As Object)
            If (Not (Me.codesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent codesCompleted(Me, New codesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub AliveCompletedEventHandler(ByVal sender As Object, ByVal e As AliveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AliveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetCarrierQuoteByTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCarrierQuoteByTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCarrierQuoteByTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub ACGProvidersCompletedEventHandler(ByVal sender As Object, ByVal e As ACGProvidersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ACGProvidersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub CheckAvailabilityCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAvailabilityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckAvailabilityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetLowestQuoteByClassPartialCompletedEventHandler(ByVal sender As Object, ByVal e As GetLowestQuoteByClassPartialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLowestQuoteByClassPartialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub fosoptimizerreportCompletedEventHandler(ByVal sender As Object, ByVal e As fosoptimizerreportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fosoptimizerreportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub SendEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub PostToMsgQueueCompletedEventHandler(ByVal sender As Object, ByVal e As PostToMsgQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostToMsgQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub PopFromMsgQueueCompletedEventHandler(ByVal sender As Object, ByVal e As PopFromMsgQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PopFromMsgQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub logmeCompletedEventHandler(ByVal sender As Object, ByVal e As logmeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class logmeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub TestDeltaCompletedEventHandler(ByVal sender As Object, ByVal e As TestDeltaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestDeltaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub DeltaContractCompletedEventHandler(ByVal sender As Object, ByVal e As DeltaContractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeltaContractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetD2DQuotesByClassCompletedEventHandler(ByVal sender As Object, ByVal e As GetD2DQuotesByClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetD2DQuotesByClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub TestQuoteD2D2CompletedEventHandler(ByVal sender As Object, ByVal e As TestQuoteD2D2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestQuoteD2D2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub TweetCompletedEventHandler(ByVal sender As Object, ByVal e As TweetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TweetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub UpdateMaintNextCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMaintNextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMaintNextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetLowestQuoteByClassCompletedEventHandler(ByVal sender As Object, ByVal e As GetLowestQuoteByClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLowestQuoteByClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetRoundEarthDistanceFromLatLongCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoundEarthDistanceFromLatLongCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoundEarthDistanceFromLatLongCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub FOSImportCompletedEventHandler(ByVal sender As Object, ByVal e As FOSImportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FOSImportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub FlightRequestMatchCompletedEventHandler(ByVal sender As Object, ByVal e As FlightRequestMatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FlightRequestMatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub FlightRequestReserveCompletedEventHandler(ByVal sender As Object, ByVal e As FlightRequestReserveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FlightRequestReserveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub FlightRequestUploadCompletedEventHandler(ByVal sender As Object, ByVal e As FlightRequestUploadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FlightRequestUploadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub FlightRequestCancelCompletedEventHandler(ByVal sender As Object, ByVal e As FlightRequestCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FlightRequestCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub CarrierFlightsCompletedEventHandler(ByVal sender As Object, ByVal e As CarrierFlightsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarrierFlightsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub getdistanceCompletedEventHandler(ByVal sender As Object, ByVal e As getdistanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getdistanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub AOECompletedEventHandler(ByVal sender As Object, ByVal e As AOECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AOECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub AirportLongLatCompletedEventHandler(ByVal sender As Object, ByVal e As AirportLongLatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AirportLongLatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub AOEbyCountryCompletedEventHandler(ByVal sender As Object, ByVal e As AOEbyCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AOEbyCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetAirRoutesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAirRoutesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAirRoutesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CarrierID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNearbyAirportsByLatitudeLongitudeWithinDistanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetRegionalAirportsByCarriersCompletedEventHandler(ByVal sender As Object, ByVal e As GetRegionalAirportsByCarriersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRegionalAirportsByCarriersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetAllAirportsInStateCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllAirportsInStateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllAirportsInStateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetAirportsInStateRunwayInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAirportsInStateRunwayInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAirportsInStateRunwayInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetRoundEarthDistanceBetweenLocationsCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoundEarthDistanceBetweenLocationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoundEarthDistanceBetweenLocationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetAirportInformationByAirportCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAirportInformationByAirportCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAirportInformationByAirportCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub clickcountCompletedEventHandler(ByVal sender As Object, ByVal e As clickcountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class clickcountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub RecordMaintenanceEventCompletedEventHandler(ByVal sender As Object, ByVal e As RecordMaintenanceEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecordMaintenanceEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub OptimizeCASWebCompletedEventHandler(ByVal sender As Object, ByVal e As OptimizeCASWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OptimizeCASWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub OptimizeCASWebSmallCompletedEventHandler(ByVal sender As Object, ByVal e As OptimizeCASWebSmallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OptimizeCASWebSmallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub OptimizeCASRepositionCostCompletedEventHandler(ByVal sender As Object, ByVal e As OptimizeCASRepositionCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OptimizeCASRepositionCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub paymentCompletedEventHandler(ByVal sender As Object, ByVal e As paymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class paymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub GetLowestQuoteByClassXMLTESTCompletedEventHandler(ByVal sender As Object, ByVal e As GetLowestQuoteByClassXMLTESTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLowestQuoteByClassXMLTESTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub HistoricalRepositionCompletedEventHandler(ByVal sender As Object, ByVal e As HistoricalRepositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HistoricalRepositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub BARTCompletedEventHandler(ByVal sender As Object, ByVal e As BARTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BARTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub StatsCompletedEventHandler(ByVal sender As Object, ByVal e As StatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub TranslateCodeCompletedEventHandler(ByVal sender As Object, ByVal e As TranslateCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TranslateCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub StatsTypeCompletedEventHandler(ByVal sender As Object, ByVal e As StatsTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatsTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")>  _
    Public Delegate Sub codesCompletedEventHandler(ByVal sender As Object, ByVal e As codesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class codesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
