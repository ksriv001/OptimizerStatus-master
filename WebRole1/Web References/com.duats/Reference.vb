'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace com.duats
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="servicesBinding", [Namespace]:="urn:services")>  _
    Partial Public Class servicesService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private QuickPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MapSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private extDecodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private extEncodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private faaContractionsLookupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private closeVFROperationCompleted As System.Threading.SendOrPostCallback
        
        Private fileFAAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fileICAOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fileICAO2012OperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxStdLoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxStdHiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxStdAreaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxOutRouteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxOutAreaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxAbbrvRouteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxAbbrvLocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxAbbrvRadiusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wxAbbrvStColOperationCompleted As System.Threading.SendOrPostCallback
        
        Private hourlyPlannerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private segmentPlannerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private bookmarkLoginCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WebRole1.My.MySettings.Default.WebRole1_com_duats_servicesService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event QuickPathCompleted As QuickPathCompletedEventHandler
        
        '''<remarks/>
        Public Event MapCompleted As MapCompletedEventHandler
        
        '''<remarks/>
        Public Event MapSetCompleted As MapSetCompletedEventHandler
        
        '''<remarks/>
        Public Event extDecodeCompleted As extDecodeCompletedEventHandler
        
        '''<remarks/>
        Public Event extEncodeCompleted As extEncodeCompletedEventHandler
        
        '''<remarks/>
        Public Event faaContractionsLookupCompleted As faaContractionsLookupCompletedEventHandler
        
        '''<remarks/>
        Public Event closeVFRCompleted As closeVFRCompletedEventHandler
        
        '''<remarks/>
        Public Event fileFAACompleted As fileFAACompletedEventHandler
        
        '''<remarks/>
        Public Event fileICAOCompleted As fileICAOCompletedEventHandler
        
        '''<remarks/>
        Public Event fileICAO2012Completed As fileICAO2012CompletedEventHandler
        
        '''<remarks/>
        Public Event wxStdLoCompleted As wxStdLoCompletedEventHandler
        
        '''<remarks/>
        Public Event wxStdHiCompleted As wxStdHiCompletedEventHandler
        
        '''<remarks/>
        Public Event wxStdAreaCompleted As wxStdAreaCompletedEventHandler
        
        '''<remarks/>
        Public Event wxOutRouteCompleted As wxOutRouteCompletedEventHandler
        
        '''<remarks/>
        Public Event wxOutAreaCompleted As wxOutAreaCompletedEventHandler
        
        '''<remarks/>
        Public Event wxAbbrvRouteCompleted As wxAbbrvRouteCompletedEventHandler
        
        '''<remarks/>
        Public Event wxAbbrvLocationCompleted As wxAbbrvLocationCompletedEventHandler
        
        '''<remarks/>
        Public Event wxAbbrvRadiusCompleted As wxAbbrvRadiusCompletedEventHandler
        
        '''<remarks/>
        Public Event wxAbbrvStColCompleted As wxAbbrvStColCompletedEventHandler
        
        '''<remarks/>
        Public Event hourlyPlannerCompleted As hourlyPlannerCompletedEventHandler
        
        '''<remarks/>
        Public Event segmentPlannerCompleted As segmentPlannerCompletedEventHandler
        
        '''<remarks/>
        Public Event bookmarkLoginCodeCompleted As bookmarkLoginCodeCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#QuickPath", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function QuickPath(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal quickPathCommand As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("QuickPath", New Object() {terminalId, userId, userPassword, quickPathCommand})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QuickPathAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal quickPathCommand As String)
            Me.QuickPathAsync(terminalId, userId, userPassword, quickPathCommand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QuickPathAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal quickPathCommand As String, ByVal userState As Object)
            If (Me.QuickPathOperationCompleted Is Nothing) Then
                Me.QuickPathOperationCompleted = AddressOf Me.OnQuickPathOperationCompleted
            End If
            Me.InvokeAsync("QuickPath", New Object() {terminalId, userId, userPassword, quickPathCommand}, Me.QuickPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnQuickPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.QuickPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QuickPathCompleted(Me, New QuickPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#Map", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function Map(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapName As String) As <System.Xml.Serialization.SoapElementAttribute("map", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Map", New Object() {terminalId, userId, userPassword, mapName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub MapAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapName As String)
            Me.MapAsync(terminalId, userId, userPassword, mapName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MapAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapName As String, ByVal userState As Object)
            If (Me.MapOperationCompleted Is Nothing) Then
                Me.MapOperationCompleted = AddressOf Me.OnMapOperationCompleted
            End If
            Me.InvokeAsync("Map", New Object() {terminalId, userId, userPassword, mapName}, Me.MapOperationCompleted, userState)
        End Sub
        
        Private Sub OnMapOperationCompleted(ByVal arg As Object)
            If (Not (Me.MapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MapCompleted(Me, New MapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#MapSet", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function MapSet(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapSetName As String) As <System.Xml.Serialization.SoapElementAttribute("maps")> String
            Dim results() As Object = Me.Invoke("MapSet", New Object() {terminalId, userId, userPassword, mapSetName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MapSetAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapSetName As String)
            Me.MapSetAsync(terminalId, userId, userPassword, mapSetName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MapSetAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal mapSetName As String, ByVal userState As Object)
            If (Me.MapSetOperationCompleted Is Nothing) Then
                Me.MapSetOperationCompleted = AddressOf Me.OnMapSetOperationCompleted
            End If
            Me.InvokeAsync("MapSet", New Object() {terminalId, userId, userPassword, mapSetName}, Me.MapSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnMapSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.MapSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MapSetCompleted(Me, New MapSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#extDecode", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function extDecode(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal decodeData As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("extDecode", New Object() {terminalId, userId, userPassword, tailnumber, decodeData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub extDecodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal decodeData As String)
            Me.extDecodeAsync(terminalId, userId, userPassword, tailnumber, decodeData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub extDecodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal decodeData As String, ByVal userState As Object)
            If (Me.extDecodeOperationCompleted Is Nothing) Then
                Me.extDecodeOperationCompleted = AddressOf Me.OnextDecodeOperationCompleted
            End If
            Me.InvokeAsync("extDecode", New Object() {terminalId, userId, userPassword, tailnumber, decodeData}, Me.extDecodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnextDecodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.extDecodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent extDecodeCompleted(Me, New extDecodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#extEncode", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function extEncode(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal encodeData As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("extEncode", New Object() {terminalId, userId, userPassword, tailnumber, encodeData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub extEncodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal encodeData As String)
            Me.extEncodeAsync(terminalId, userId, userPassword, tailnumber, encodeData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub extEncodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal encodeData As String, ByVal userState As Object)
            If (Me.extEncodeOperationCompleted Is Nothing) Then
                Me.extEncodeOperationCompleted = AddressOf Me.OnextEncodeOperationCompleted
            End If
            Me.InvokeAsync("extEncode", New Object() {terminalId, userId, userPassword, tailnumber, encodeData}, Me.extEncodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnextEncodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.extEncodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent extEncodeCompleted(Me, New extEncodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#faaContractionsLookup", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function faaContractionsLookup(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal lookupData As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("faaContractionsLookup", New Object() {terminalId, userId, userPassword, tailnumber, lookupData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub faaContractionsLookupAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal lookupData As String)
            Me.faaContractionsLookupAsync(terminalId, userId, userPassword, tailnumber, lookupData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub faaContractionsLookupAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal lookupData As String, ByVal userState As Object)
            If (Me.faaContractionsLookupOperationCompleted Is Nothing) Then
                Me.faaContractionsLookupOperationCompleted = AddressOf Me.OnfaaContractionsLookupOperationCompleted
            End If
            Me.InvokeAsync("faaContractionsLookup", New Object() {terminalId, userId, userPassword, tailnumber, lookupData}, Me.faaContractionsLookupOperationCompleted, userState)
        End Sub
        
        Private Sub OnfaaContractionsLookupOperationCompleted(ByVal arg As Object)
            If (Not (Me.faaContractionsLookupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent faaContractionsLookupCompleted(Me, New faaContractionsLookupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#closeVFR", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function closeVFR(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal actype As String, ByVal departure As String, ByVal destfiled As String, ByVal destactual As String, ByVal remarks As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("closeVFR", New Object() {terminalId, userId, userPassword, tailnumber, actype, departure, destfiled, destactual, remarks})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub closeVFRAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal actype As String, ByVal departure As String, ByVal destfiled As String, ByVal destactual As String, ByVal remarks As String)
            Me.closeVFRAsync(terminalId, userId, userPassword, tailnumber, actype, departure, destfiled, destactual, remarks, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub closeVFRAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal tailnumber As String, ByVal actype As String, ByVal departure As String, ByVal destfiled As String, ByVal destactual As String, ByVal remarks As String, ByVal userState As Object)
            If (Me.closeVFROperationCompleted Is Nothing) Then
                Me.closeVFROperationCompleted = AddressOf Me.OncloseVFROperationCompleted
            End If
            Me.InvokeAsync("closeVFR", New Object() {terminalId, userId, userPassword, tailnumber, actype, departure, destfiled, destactual, remarks}, Me.closeVFROperationCompleted, userState)
        End Sub
        
        Private Sub OncloseVFROperationCompleted(ByVal arg As Object)
            If (Not (Me.closeVFRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent closeVFRCompleted(Me, New closeVFRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#fileFAA", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function fileFAA( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal fptype As String,  _
                    ByVal tailnumber As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal equipment As String,  _
                    ByVal airspeed As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal homebase As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal remarks As String,  _
                    ByVal heavy As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String,  _
                    ByVal destname As String,  _
                    ByVal destphonenumber As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("fileFAA", New Object() {terminalId, userId, userPassword, deptime, fptype, tailnumber, numofac, actype, equipment, airspeed, departure, destination, altitude, route, ete, fob, alternate, homebase, pax, color, pilotaddress, pilotphonenumber, remarks, heavy, fpack, fpackemail, destname, destphonenumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fileFAAAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal fptype As String,  _
                    ByVal tailnumber As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal equipment As String,  _
                    ByVal airspeed As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal homebase As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal remarks As String,  _
                    ByVal heavy As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String,  _
                    ByVal destname As String,  _
                    ByVal destphonenumber As String)
            Me.fileFAAAsync(terminalId, userId, userPassword, deptime, fptype, tailnumber, numofac, actype, equipment, airspeed, departure, destination, altitude, route, ete, fob, alternate, homebase, pax, color, pilotaddress, pilotphonenumber, remarks, heavy, fpack, fpackemail, destname, destphonenumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fileFAAAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal fptype As String,  _
                    ByVal tailnumber As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal equipment As String,  _
                    ByVal airspeed As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal homebase As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal remarks As String,  _
                    ByVal heavy As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String,  _
                    ByVal destname As String,  _
                    ByVal destphonenumber As String,  _
                    ByVal userState As Object)
            If (Me.fileFAAOperationCompleted Is Nothing) Then
                Me.fileFAAOperationCompleted = AddressOf Me.OnfileFAAOperationCompleted
            End If
            Me.InvokeAsync("fileFAA", New Object() {terminalId, userId, userPassword, deptime, fptype, tailnumber, numofac, actype, equipment, airspeed, departure, destination, altitude, route, ete, fob, alternate, homebase, pax, color, pilotaddress, pilotphonenumber, remarks, heavy, fpack, fpackemail, destname, destphonenumber}, Me.fileFAAOperationCompleted, userState)
        End Sub
        
        Private Sub OnfileFAAOperationCompleted(ByVal arg As Object)
            If (Not (Me.fileFAACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fileFAACompleted(Me, New fileFAACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#fileICAO", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function fileICAO( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal domesticICAO As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("fileICAO", New Object() {terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, domesticICAO, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fileICAOAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal domesticICAO As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String)
            Me.fileICAOAsync(terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, domesticICAO, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fileICAOAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal domesticICAO As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String,  _
                    ByVal userState As Object)
            If (Me.fileICAOOperationCompleted Is Nothing) Then
                Me.fileICAOOperationCompleted = AddressOf Me.OnfileICAOOperationCompleted
            End If
            Me.InvokeAsync("fileICAO", New Object() {terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, domesticICAO, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail}, Me.fileICAOOperationCompleted, userState)
        End Sub
        
        Private Sub OnfileICAOOperationCompleted(ByVal arg As Object)
            If (Not (Me.fileICAOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fileICAOCompleted(Me, New fileICAOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#fileICAO2012", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function fileICAO2012( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("fileICAO2012", New Object() {terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fileICAO2012Async( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String)
            Me.fileICAO2012Async(terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fileICAO2012Async( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal fptype As String,  _
                    ByVal typeofflight As String,  _
                    ByVal numofac As String,  _
                    ByVal actype As String,  _
                    ByVal wak As String,  _
                    ByVal equipment As String,  _
                    ByVal icaossr As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal fob As String,  _
                    ByVal alternate As String,  _
                    ByVal pax As String,  _
                    ByVal color As String,  _
                    ByVal airspeed As String,  _
                    ByVal remarks As String,  _
                    ByVal emgradio As String,  _
                    ByVal surviveequip As String,  _
                    ByVal jackets As String,  _
                    ByVal dinghies As String,  _
                    ByVal dinghiescap As String,  _
                    ByVal dinghiescovered As String,  _
                    ByVal dinghiescolor As String,  _
                    ByVal safetyremarks As String,  _
                    ByVal pilotname As String,  _
                    ByVal pilotaddress As String,  _
                    ByVal pilotphonenumber As String,  _
                    ByVal fpack As String,  _
                    ByVal fpackemail As String,  _
                    ByVal userState As Object)
            If (Me.fileICAO2012OperationCompleted Is Nothing) Then
                Me.fileICAO2012OperationCompleted = AddressOf Me.OnfileICAO2012OperationCompleted
            End If
            Me.InvokeAsync("fileICAO2012", New Object() {terminalId, userId, userPassword, deptime, tailnumber, fptype, typeofflight, numofac, actype, wak, equipment, icaossr, departure, destination, altitude, route, ete, fob, alternate, pax, color, airspeed, remarks, emgradio, surviveequip, jackets, dinghies, dinghiescap, dinghiescovered, dinghiescolor, safetyremarks, pilotname, pilotaddress, pilotphonenumber, fpack, fpackemail}, Me.fileICAO2012OperationCompleted, userState)
        End Sub
        
        Private Sub OnfileICAO2012OperationCompleted(ByVal arg As Object)
            If (Not (Me.fileICAO2012CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fileICAO2012Completed(Me, New fileICAO2012CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxStdLo", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxStdLo( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxStdLo", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxStdLoAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String)
            Me.wxStdLoAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxStdLoAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal userState As Object)
            If (Me.wxStdLoOperationCompleted Is Nothing) Then
                Me.wxStdLoOperationCompleted = AddressOf Me.OnwxStdLoOperationCompleted
            End If
            Me.InvokeAsync("wxStdLo", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx}, Me.wxStdLoOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxStdLoOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxStdLoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxStdLoCompleted(Me, New wxStdLoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxStdHi", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxStdHi( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxStdHi", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxStdHiAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String)
            Me.wxStdHiAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxStdHiAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal userState As Object)
            If (Me.wxStdHiOperationCompleted Is Nothing) Then
                Me.wxStdHiOperationCompleted = AddressOf Me.OnwxStdHiOperationCompleted
            End If
            Me.InvokeAsync("wxStdHi", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx}, Me.wxStdHiOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxStdHiOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxStdHiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxStdHiCompleted(Me, New wxStdHiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxStdArea", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxStdArea(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal deptime As String, ByVal tailnumber As String, ByVal departure As String, ByVal radius As String, ByVal atcadv As String, ByVal nafdc As String, ByVal hurricane As String, ByVal plainlanguage As String, ByVal plaintimezone As String, ByVal adversewx As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxStdArea", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxStdAreaAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal deptime As String, ByVal tailnumber As String, ByVal departure As String, ByVal radius As String, ByVal atcadv As String, ByVal nafdc As String, ByVal hurricane As String, ByVal plainlanguage As String, ByVal plaintimezone As String, ByVal adversewx As String)
            Me.wxStdAreaAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxStdAreaAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal deptime As String, ByVal tailnumber As String, ByVal departure As String, ByVal radius As String, ByVal atcadv As String, ByVal nafdc As String, ByVal hurricane As String, ByVal plainlanguage As String, ByVal plaintimezone As String, ByVal adversewx As String, ByVal userState As Object)
            If (Me.wxStdAreaOperationCompleted Is Nothing) Then
                Me.wxStdAreaOperationCompleted = AddressOf Me.OnwxStdAreaOperationCompleted
            End If
            Me.InvokeAsync("wxStdArea", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx}, Me.wxStdAreaOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxStdAreaOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxStdAreaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxStdAreaCompleted(Me, New wxStdAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxOutRoute", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxOutRoute( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxOutRoute", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxOutRouteAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String)
            Me.wxOutRouteAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxOutRouteAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal userState As Object)
            If (Me.wxOutRouteOperationCompleted Is Nothing) Then
                Me.wxOutRouteOperationCompleted = AddressOf Me.OnwxOutRouteOperationCompleted
            End If
            Me.InvokeAsync("wxOutRoute", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx}, Me.wxOutRouteOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxOutRouteOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxOutRouteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxOutRouteCompleted(Me, New wxOutRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxOutArea", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxOutArea( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxOutArea", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxOutAreaAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String)
            Me.wxOutAreaAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxOutAreaAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal metar As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal winds As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal userState As Object)
            If (Me.wxOutAreaOperationCompleted Is Nothing) Then
                Me.wxOutAreaOperationCompleted = AddressOf Me.OnwxOutAreaOperationCompleted
            End If
            Me.InvokeAsync("wxOutArea", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, radius, atcadv, nafdc, hurricane, metar, pilotrpt, radar, winds, plainlanguage, plaintimezone, adversewx}, Me.wxOutAreaOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxOutAreaOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxOutAreaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxOutAreaCompleted(Me, New wxOutAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxAbbrvRoute", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxAbbrvRoute( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxAbbrvRoute", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvRouteAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String)
            Me.wxAbbrvRouteAsync(terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvRouteAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal alternate As String,  _
                    ByVal altitude As String,  _
                    ByVal route As String,  _
                    ByVal ete As String,  _
                    ByVal wxwidth As String,  _
                    ByVal wawidth As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String,  _
                    ByVal userState As Object)
            If (Me.wxAbbrvRouteOperationCompleted Is Nothing) Then
                Me.wxAbbrvRouteOperationCompleted = AddressOf Me.OnwxAbbrvRouteOperationCompleted
            End If
            Me.InvokeAsync("wxAbbrvRoute", New Object() {terminalId, userId, userPassword, deptime, tailnumber, departure, destination, alternate, altitude, route, ete, wxwidth, wawidth, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa}, Me.wxAbbrvRouteOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxAbbrvRouteOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxAbbrvRouteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxAbbrvRouteCompleted(Me, New wxAbbrvRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxAbbrvLocation", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxAbbrvLocation( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxAbbrvLocation", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvLocationAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String)
            Me.wxAbbrvLocationAsync(terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvLocationAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String,  _
                    ByVal userState As Object)
            If (Me.wxAbbrvLocationOperationCompleted Is Nothing) Then
                Me.wxAbbrvLocationOperationCompleted = AddressOf Me.OnwxAbbrvLocationOperationCompleted
            End If
            Me.InvokeAsync("wxAbbrvLocation", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa}, Me.wxAbbrvLocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxAbbrvLocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxAbbrvLocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxAbbrvLocationCompleted(Me, New wxAbbrvLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxAbbrvRadius", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxAbbrvRadius( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxAbbrvRadius", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvRadiusAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String)
            Me.wxAbbrvRadiusAsync(terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvRadiusAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal radius As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String,  _
                    ByVal userState As Object)
            If (Me.wxAbbrvRadiusOperationCompleted Is Nothing) Then
                Me.wxAbbrvRadiusOperationCompleted = AddressOf Me.OnwxAbbrvRadiusOperationCompleted
            End If
            Me.InvokeAsync("wxAbbrvRadius", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, radius, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa}, Me.wxAbbrvRadiusOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxAbbrvRadiusOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxAbbrvRadiusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxAbbrvRadiusCompleted(Me, New wxAbbrvRadiusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#wxAbbrvStCol", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function wxAbbrvStCol( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("wxAbbrvStCol", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvStColAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String)
            Me.wxAbbrvStColAsync(terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wxAbbrvStColAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal deptime As String,  _
                    ByVal tailnumber As String,  _
                    ByVal locations As String,  _
                    ByVal altitude As String,  _
                    ByVal ete As String,  _
                    ByVal atcadv As String,  _
                    ByVal nafdc As String,  _
                    ByVal hurricane As String,  _
                    ByVal plainlanguage As String,  _
                    ByVal plaintimezone As String,  _
                    ByVal adversewx As String,  _
                    ByVal metar As String,  _
                    ByVal metartrend As String,  _
                    ByVal taf As String,  _
                    ByVal winds As String,  _
                    ByVal pilotrpt As String,  _
                    ByVal radar As String,  _
                    ByVal fdc As String,  _
                    ByVal notam As String,  _
                    ByVal areaforcast As String,  _
                    ByVal sigmet As String,  _
                    ByVal airmet As String,  _
                    ByVal convsigmet As String,  _
                    ByVal severewx As String,  _
                    ByVal cwa As String,  _
                    ByVal swfa As String,  _
                    ByVal userState As Object)
            If (Me.wxAbbrvStColOperationCompleted Is Nothing) Then
                Me.wxAbbrvStColOperationCompleted = AddressOf Me.OnwxAbbrvStColOperationCompleted
            End If
            Me.InvokeAsync("wxAbbrvStCol", New Object() {terminalId, userId, userPassword, deptime, tailnumber, locations, altitude, ete, atcadv, nafdc, hurricane, plainlanguage, plaintimezone, adversewx, metar, metartrend, taf, winds, pilotrpt, radar, fdc, notam, areaforcast, sigmet, airmet, convsigmet, severewx, cwa, swfa}, Me.wxAbbrvStColOperationCompleted, userState)
        End Sub
        
        Private Sub OnwxAbbrvStColOperationCompleted(ByVal arg As Object)
            If (Not (Me.wxAbbrvStColCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wxAbbrvStColCompleted(Me, New wxAbbrvStColCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#hourlyPlanner", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function hourlyPlanner( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal hourOne As String,  _
                    ByVal hourTwo As String,  _
                    ByVal hourThree As String,  _
                    ByVal hourFour As String,  _
                    ByVal hourFive As String,  _
                    ByVal hourSix As String,  _
                    ByVal hourSeven As String,  _
                    ByVal hourEight As String,  _
                    ByVal hourNine As String,  _
                    ByVal hourTen As String,  _
                    ByVal profileName As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("hourlyPlanner", New Object() {terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, hourOne, hourTwo, hourThree, hourFour, hourFive, hourSix, hourSeven, hourEight, hourNine, hourTen, profileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub hourlyPlannerAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal hourOne As String,  _
                    ByVal hourTwo As String,  _
                    ByVal hourThree As String,  _
                    ByVal hourFour As String,  _
                    ByVal hourFive As String,  _
                    ByVal hourSix As String,  _
                    ByVal hourSeven As String,  _
                    ByVal hourEight As String,  _
                    ByVal hourNine As String,  _
                    ByVal hourTen As String,  _
                    ByVal profileName As String)
            Me.hourlyPlannerAsync(terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, hourOne, hourTwo, hourThree, hourFour, hourFive, hourSix, hourSeven, hourEight, hourNine, hourTen, profileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub hourlyPlannerAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal hourOne As String,  _
                    ByVal hourTwo As String,  _
                    ByVal hourThree As String,  _
                    ByVal hourFour As String,  _
                    ByVal hourFive As String,  _
                    ByVal hourSix As String,  _
                    ByVal hourSeven As String,  _
                    ByVal hourEight As String,  _
                    ByVal hourNine As String,  _
                    ByVal hourTen As String,  _
                    ByVal profileName As String,  _
                    ByVal userState As Object)
            If (Me.hourlyPlannerOperationCompleted Is Nothing) Then
                Me.hourlyPlannerOperationCompleted = AddressOf Me.OnhourlyPlannerOperationCompleted
            End If
            Me.InvokeAsync("hourlyPlanner", New Object() {terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, hourOne, hourTwo, hourThree, hourFour, hourFive, hourSix, hourSeven, hourEight, hourNine, hourTen, profileName}, Me.hourlyPlannerOperationCompleted, userState)
        End Sub
        
        Private Sub OnhourlyPlannerOperationCompleted(ByVal arg As Object)
            If (Not (Me.hourlyPlannerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent hourlyPlannerCompleted(Me, New hourlyPlannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#segmentPlanner", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function segmentPlanner( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal climbBurn As String,  _
                    ByVal cruiseBurn As String,  _
                    ByVal descentBurn As String,  _
                    ByVal profileName As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("segmentPlanner", New Object() {terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, climbBurn, cruiseBurn, descentBurn, profileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub segmentPlannerAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal climbBurn As String,  _
                    ByVal cruiseBurn As String,  _
                    ByVal descentBurn As String,  _
                    ByVal profileName As String)
            Me.segmentPlannerAsync(terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, climbBurn, cruiseBurn, descentBurn, profileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub segmentPlannerAsync( _
                    ByVal terminalId As String,  _
                    ByVal userId As String,  _
                    ByVal userPassword As String,  _
                    ByVal departure As String,  _
                    ByVal destination As String,  _
                    ByVal route As String,  _
                    ByVal altitude As String,  _
                    ByVal depTime As String,  _
                    ByVal outputFormat As String,  _
                    ByVal latLongFormat As String,  _
                    ByVal additionalWaypoints As String,  _
                    ByVal units As String,  _
                    ByVal climbAirspeed As String,  _
                    ByVal climbRate As String,  _
                    ByVal cruiseAirspeed As String,  _
                    ByVal descentAirspeed As String,  _
                    ByVal descentRate As String,  _
                    ByVal climbBurn As String,  _
                    ByVal cruiseBurn As String,  _
                    ByVal descentBurn As String,  _
                    ByVal profileName As String,  _
                    ByVal userState As Object)
            If (Me.segmentPlannerOperationCompleted Is Nothing) Then
                Me.segmentPlannerOperationCompleted = AddressOf Me.OnsegmentPlannerOperationCompleted
            End If
            Me.InvokeAsync("segmentPlanner", New Object() {terminalId, userId, userPassword, departure, destination, route, altitude, depTime, outputFormat, latLongFormat, additionalWaypoints, units, climbAirspeed, climbRate, cruiseAirspeed, descentAirspeed, descentRate, climbBurn, cruiseBurn, descentBurn, profileName}, Me.segmentPlannerOperationCompleted, userState)
        End Sub
        
        Private Sub OnsegmentPlannerOperationCompleted(ByVal arg As Object)
            If (Not (Me.segmentPlannerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent segmentPlannerCompleted(Me, New segmentPlannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#services#bookmarkLoginCode", RequestNamespace:="http://schemas.xmlsoap.org/soap/envelope/", ResponseNamespace:="http://schemas.xmlsoap.org/soap/envelope/")>  _
        Public Function bookmarkLoginCode(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal resetCode As String) As <System.Xml.Serialization.SoapElementAttribute("quickpathText")> String
            Dim results() As Object = Me.Invoke("bookmarkLoginCode", New Object() {terminalId, userId, userPassword, resetCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub bookmarkLoginCodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal resetCode As String)
            Me.bookmarkLoginCodeAsync(terminalId, userId, userPassword, resetCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub bookmarkLoginCodeAsync(ByVal terminalId As String, ByVal userId As String, ByVal userPassword As String, ByVal resetCode As String, ByVal userState As Object)
            If (Me.bookmarkLoginCodeOperationCompleted Is Nothing) Then
                Me.bookmarkLoginCodeOperationCompleted = AddressOf Me.OnbookmarkLoginCodeOperationCompleted
            End If
            Me.InvokeAsync("bookmarkLoginCode", New Object() {terminalId, userId, userPassword, resetCode}, Me.bookmarkLoginCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnbookmarkLoginCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.bookmarkLoginCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent bookmarkLoginCodeCompleted(Me, New bookmarkLoginCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub QuickPathCompletedEventHandler(ByVal sender As Object, ByVal e As QuickPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QuickPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub MapCompletedEventHandler(ByVal sender As Object, ByVal e As MapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub MapSetCompletedEventHandler(ByVal sender As Object, ByVal e As MapSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MapSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub extDecodeCompletedEventHandler(ByVal sender As Object, ByVal e As extDecodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class extDecodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub extEncodeCompletedEventHandler(ByVal sender As Object, ByVal e As extEncodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class extEncodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub faaContractionsLookupCompletedEventHandler(ByVal sender As Object, ByVal e As faaContractionsLookupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class faaContractionsLookupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub closeVFRCompletedEventHandler(ByVal sender As Object, ByVal e As closeVFRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class closeVFRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub fileFAACompletedEventHandler(ByVal sender As Object, ByVal e As fileFAACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fileFAACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub fileICAOCompletedEventHandler(ByVal sender As Object, ByVal e As fileICAOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fileICAOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub fileICAO2012CompletedEventHandler(ByVal sender As Object, ByVal e As fileICAO2012CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fileICAO2012CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxStdLoCompletedEventHandler(ByVal sender As Object, ByVal e As wxStdLoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxStdLoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxStdHiCompletedEventHandler(ByVal sender As Object, ByVal e As wxStdHiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxStdHiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxStdAreaCompletedEventHandler(ByVal sender As Object, ByVal e As wxStdAreaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxStdAreaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxOutRouteCompletedEventHandler(ByVal sender As Object, ByVal e As wxOutRouteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxOutRouteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxOutAreaCompletedEventHandler(ByVal sender As Object, ByVal e As wxOutAreaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxOutAreaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxAbbrvRouteCompletedEventHandler(ByVal sender As Object, ByVal e As wxAbbrvRouteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxAbbrvRouteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxAbbrvLocationCompletedEventHandler(ByVal sender As Object, ByVal e As wxAbbrvLocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxAbbrvLocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxAbbrvRadiusCompletedEventHandler(ByVal sender As Object, ByVal e As wxAbbrvRadiusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxAbbrvRadiusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub wxAbbrvStColCompletedEventHandler(ByVal sender As Object, ByVal e As wxAbbrvStColCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wxAbbrvStColCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub hourlyPlannerCompletedEventHandler(ByVal sender As Object, ByVal e As hourlyPlannerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class hourlyPlannerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub segmentPlannerCompletedEventHandler(ByVal sender As Object, ByVal e As segmentPlannerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class segmentPlannerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub bookmarkLoginCodeCompletedEventHandler(ByVal sender As Object, ByVal e As bookmarkLoginCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class bookmarkLoginCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
